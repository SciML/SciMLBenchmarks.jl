---
title: Suite Sparse Matrix Jacobian Factorization Benchmarks
author: Jürgen Fuhrmann, Anastasia Dunca
---

```julia
using BenchmarkTools, Random, VectorizationBase, Statistics
using LinearAlgebra, SparseArrays, LinearSolve, Sparspak
import Pardiso
using Plots
using MatrixDepot
using Dates

BenchmarkTools.DEFAULT_PARAMETERS.seconds = 0.5

# Why do I need to set this ?
BenchmarkTools.DEFAULT_PARAMETERS.samples = 10

# Set a reasonable timeout for each benchmark
BenchmarkTools.DEFAULT_PARAMETERS.time_tolerance = 0.05
BenchmarkTools.DEFAULT_PARAMETERS.memory_tolerance = 0.01

# Start time for tracking
start_time = now()
last_heartbeat = now()

algs = [
    UMFPACKFactorization(),
    KLUFactorization(),
    MKLPardisoFactorize(),
    SparspakFactorization()
]
algnames = ["UMFPACK", "KLU", "Pardiso", "Sparspak"]
algnames_transpose = reshape(algnames, 1, length(algnames))

cols = [:red, :blue, :green, :magenta, :turqoise] # one color per alg

# matrices = ["HB/1138_bus", "HB/494_bus", "HB/662_bus", "HB/685_bus", "HB/bcsstk01", "HB/bcsstk02", "HB/bcsstk03", "HB/bcsstk04",  "HB/bcsstk05", "HB/bcsstk06", "HB/bcsstk07", "HB/bcsstk08", "HB/bcsstk09", "HB/bcsstk10", "HB/bcsstk11", "HB/bcsstk12", "HB/bcsstk13", "HB/bcsstk14", "HB/bcsstk15", "HB/bcsstk16"]
allmatrices_md = listnames("*/*")

total_matrices = length(allmatrices_md.content[1].rows)
@info "Total number of matrices: $total_matrices"

# Track progress and failures
processed_count = 0
failed_matrices = String[]
successful_matrices = String[]
skipped_large_matrices = String[]

times = fill(NaN, length(allmatrices_md.content[1].rows), length(algs))
percentage_sparsity = fill(NaN, length(allmatrices_md.content[1].rows))
spaced_out_sparsity = fill(NaN, length(allmatrices_md.content[1].rows))
matrix_size = fill(NaN, length(allmatrices_md.content[1].rows))
bandedness_five = fill(NaN, length(allmatrices_md.content[1].rows))
bandedness_ten = fill(NaN, length(allmatrices_md.content[1].rows))
bandedness_twenty = fill(NaN, length(allmatrices_md.content[1].rows))

function compute_bandedness(A, bandwidth)
    n = size(A, 1)
    total_band_positions = 0
    non_zero_in_band = 0
    bandwidth = bandwidth
    for r in 1:n
        for c in 1:n
            if abs(r - c) <= bandwidth
                total_band_positions += 1  # This position belongs to the band
                if A[r, c] != 0
                    non_zero_in_band += 1  # This element is non-zero in the band
                end
            end
        end
    end

    percentage_filled = non_zero_in_band / total_band_positions * 100
    return percentage_filled
end

```

```julia
for z in 1:total_matrices
    # Early termination if too many consecutive failures
    if length(failed_matrices) > 100
        @warn "Too many failures (>100), terminating benchmark early to prevent CI timeout"
        break
    end
    
    # Heartbeat every 30 seconds to prevent CI timeout
    current_time = now()
    if current_time - last_heartbeat > Dates.Second(30)
        elapsed = round((current_time - start_time) / Dates.Minute(1), digits=1)
        @info "Heartbeat: Still running... ($(elapsed) minutes elapsed, matrix $z/$total_matrices)"
        last_heartbeat = current_time
        flush(stdout)
        flush(stderr)
    end
    
    # Progress tracking - print every 10 matrices or on first/last
    if z == 1 || z == total_matrices || z % 10 == 0
        @info "Progress: Processing matrix $z of $total_matrices ($(round(100*z/total_matrices, digits=1))%)"
        @info "  - Successful: $(length(successful_matrices))"
        @info "  - Failed: $(length(failed_matrices))"
        @info "  - Skipped (too large): $(length(skipped_large_matrices))"
        flush(stdout)
        flush(stderr)
    end
    try
        matrix = allmatrices_md.content[1].rows[z]
        matrix = string(matrix[1])

        currMTX = matrix

        rng = MersenneTwister(123)
        A = mdopen(currMTX).A
        A = convert(SparseMatrixCSC, A)
        n = size(A, 1)

        mtx_copy = copy(A)

        # Check matrix size and skip if too large
        if n > 1500
            @info "Matrix $currMTX ($n × $n) is too large, skipping..."
            push!(skipped_large_matrices, currMTX)
            processed_count += 1
            continue
        end
        
        @info "Processing $currMTX: $n × $n matrix"

        ## COMPUTING SPACED OUT SPARSITY
        rows, cols = size(mtx_copy)
        new_rows = div(rows, 2)
        new_cols = div(cols, 2)
        condensed = zeros(Int, new_rows, new_cols)
        while size(mtx_copy, 1) > 32 || size(mtx_copy, 2) > 32
            rows, cols = size(mtx_copy)
            new_rows = div(rows, 2)
            new_cols = div(cols, 2)
            condensed = sparse(zeros(Int, new_rows, new_cols))

            for r in 1:2:(rows - 1)
                for c in 1:2:(cols - 1)
                    block = mtx_copy[r:min(r + 1, rows), c:min(c + 1, cols)]
                    condensed[div(r - 1, 2) + 1, div(c - 1, 2) + 1] = (length(nonzeros(block)) >=
                                                                       2) ? 1 : 0
                end
            end
            mtx_copy = condensed
        end

        ## COMPUTING FACTORIZATION TIME
        b = rand(rng, n)
        u0 = rand(rng, n)

        for j in 1:length(algs)
            try
                bt = @belapsed solve(prob, $(algs[j])).u setup=(prob = LinearProblem(copy($A),
                    copy($b);
                    u0 = copy($u0),
                    alias_A = true,
                    alias_b = true))
                times[z, j] = bt
            catch alg_error
                # Silently record NaN for failed algorithms
                times[z, j] = NaN
                @debug "Algorithm $(algnames[j]) failed on $currMTX: $(typeof(alg_error))"
            end
        end

        bandedness_five[z] = compute_bandedness(A, 5)
        bandedness_ten[z] = compute_bandedness(A, 10)
        bandedness_twenty[z] = compute_bandedness(A, 20)
        percentage_sparsity[z] = length(nonzeros(A)) / n^2
        spaced_out_sparsity[z] = length(nonzeros(mtx_copy)) * percentage_sparsity[z]
        matrix_size[z] = n

        #=
        p = bar(algnames, times[z, :];
            ylabel = "Time/s",
            yscale = :log10,
            title = "Time on $(currMTX)",
            fmt = :png,
            legend = :outertopright)
        display(p)
        =#

        push!(successful_matrices, currMTX)
        processed_count += 1
        @debug "Successfully factorized $currMTX"
    catch e
        matrix = allmatrices_md.content[1].rows[z]
        matrix = string(matrix[1])
        currMTX = matrix
        
        push!(failed_matrices, currMTX)
        processed_count += 1
        
        # Only print brief error info, not full stacktrace
        error_type = typeof(e)
        @warn "Matrix $currMTX failed: $error_type"
    end
end

# Final summary
total_elapsed = round((now() - start_time) / Dates.Minute(1), digits=1)
@info "="^60
@info "Benchmark Complete!"
@info "Total runtime: $total_elapsed minutes"
@info "Total matrices processed: $processed_count / $total_matrices"
@info "Successful: $(length(successful_matrices))"
@info "Failed: $(length(failed_matrices))"
@info "Skipped (too large): $(length(skipped_large_matrices))"
@info "="^60

# Print failed matrices list if not too many
if length(failed_matrices) > 0 && length(failed_matrices) <= 20
    @info "Failed matrices: $(join(failed_matrices, ", "))"
elseif length(failed_matrices) > 20
    @info "Failed matrices (first 20): $(join(failed_matrices[1:20], ", "))..."
end

percentage_sparsity = percentage_sparsity[.!isnan.(percentage_sparsity)]
spaced_out_sparsity = spaced_out_sparsity[.!isnan.(spaced_out_sparsity)]
spaced_out_sparsity = replace(spaced_out_sparsity, 0 => 1e-10)
bandedness_five = bandedness_five[.!isnan.(bandedness_five)]
bandedness_five = replace(bandedness_five, 0 => 1e-10)
bandedness_ten = bandedness_ten[.!isnan.(bandedness_ten)]
bandedness_ten = replace(bandedness_ten, 0 => 1e-10)
bandedness_twenty = bandedness_twenty[.!isnan.(bandedness_twenty)]
bandedness_twenty = replace(bandedness_twenty, 0 => 1e-10)
matrix_size = matrix_size[.!isnan.(matrix_size)]
nanrows = any(isnan, times; dims = 2)
times = times[.!vec(nanrows), :]
```

```julia
meantimes = vec(mean(times, dims = 1))
p = bar(algnames, meantimes;
    ylabel = "Time/s",
    yscale = :log10,
    title = "Mean factorization time",
    fmt = :png,
    legend = :outertopright)
```

```julia
p = scatter(percentage_sparsity, times;
    ylabel = "Time/s",
    yscale = :log10,
    xlabel = "Percentage Sparsity",
    xscale = :log10,
    label = algnames_transpose,
    title = "Factorization Time vs Percentage Sparsity",
    fmt = :png,
    legend = :outertopright)
```

```julia
p = scatter(matrix_size, times;
    ylabel = "Time/s",
    yscale = :log10,
    xlabel = "Matrix Size",
    xscale = :log10,
    label = algnames_transpose,
    title = "Factorization Time vs Matrix Size",
    fmt = :png,
    legend = :outertopright)
```

```julia
p = scatter(spaced_out_sparsity, times;
    ylabel = "Time/s",
    yscale = :log10,
    xlabel = "Spaced Out Sparsity",
    xscale = :log10,
    label = algnames_transpose,
    title = "Factorization Time vs Spaced Out Sparsity",
    fmt = :png,
    legend = :outertopright)
```

```julia
p = scatter(bandedness_five, times;
    ylabel = "Time/s",
    yscale = :log10,
    xlabel = "Bandedness",
    xscale = :log10,
    label = algnames_transpose,
    title = "Factorization Time vs Bandedness, Bandwidth=5",
    fmt = :png,
    legend = :outertopright)
```

```julia
p = scatter(bandedness_ten, times;
    ylabel = "Time/s",
    yscale = :log10,
    xlabel = "Bandedness",
    xscale = :log10,
    label = algnames_transpose,
    title = "Factorization Time vs Bandedness, Bandwidth=10",
    fmt = :png,
    legend = :outertopright)
```

```julia
p = scatter(bandedness_twenty, times;
    ylabel = "Time/s",
    yscale = :log10,
    xlabel = "Bandedness",
    xscale = :log10,
    label = algnames_transpose,
    title = "Factorization Time vs Bandedness, Bandwidth=20",
    fmt = :png,
    legend = :outertopright)
```

## Appendix

```julia, echo = false
using SciMLBenchmarks
SciMLBenchmarks.bench_footer(WEAVE_ARGS[:folder], WEAVE_ARGS[:file])
```
