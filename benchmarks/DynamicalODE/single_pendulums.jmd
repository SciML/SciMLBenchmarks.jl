---
title: Single Pedulum Comparison
author: Gen Kuroki (黒木玄), Chris Rackauckas
---

# Solving single pendulums by DifferentialEquations.jl

In this notebook, we shall solve the single pendulum equation:

$$\ddot q = -\sin q,$$

where $q$ means the angle.

Hamiltonian:

$$H(q,p) = \frac{1}{2}p^2 - \cos q + 1.$$

Canonical equation:

$$\dot q = p, \quad \dot p = - \sin q.$$

Initial condition:

$$q(0) = 0, \quad p(0) = 2k.$$

Exact solution:

$$q(t) = 2\arcsin(k\,\mathrm{sn}(t,k)).$$

Maximum of $q(t)$:

$$\sin(q_{\max}/2) = k, \quad q_{\max} = \max\{q(t)\}.$$

Define $y(t)$ by

$$y(t) = \sin(q(t)/2) = k\,\mathrm{sn}(t,k), \quad y_{\max} = k.$$

```julia
# Single pendulums shall be solved numerically.
#
using OrdinaryDiffEq, Elliptic, Printf, DiffEqPhysics, Statistics
using Plots

sol2q(sol) = [sol.u[i][j] for i in 1:length(sol.u), j in 1:length(sol.u[1])÷2]
sol2p(sol) = [sol.u[i][j] for i in 1:length(sol.u), j in length(sol.u[1])÷2+1:length(sol.u[1])]
sol2tqp(sol) = (sol.t, sol2q(sol), sol2p(sol))

# The exact solutions of single pendulums can be expressed by the Jacobian elliptic functions.
sn(u, k) = Jacobi.sn(u, k^2) # the Jacobian sn function

# Define a color list for plotting
colorlist = [
    "#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd",
    "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf",
]
cc(k) = colorlist[mod1(k, length(colorist))]
```

```julia
# Plot the solution of a Hamiltonian problem
t, q, p = sol2tqp(sol)
d = size(q)[2]
for j in 1:d
    j_str = d > 1 ? "[$j]" : ""
    plot(t, q[:,j], color=cc(2j-1), label="q$(j_str)", lw=1)
    plot!(t, p[:,j], color=cc(2j), label="p$(j_str)", lw=1, ls=:dash, alpha=0.8)
end
plot!(grid=true)  # Add grid with appropriate linestyle
xlabel!("t")  # Update x-axis label
ylabel!("q, p")  # Update y-axis label
plot!(legend=:bottomleft)
```

```julia
# Plot the solution of a Hamiltonian problem on the 2D phase space
t, q, p = sol2tqp(sol)
println("t: ", t)
println("q: ", q)
println("p: ", p)
d = size(q)[2]
for j in 1:d
    j_str = d > 1 ? "[$j]" : ""
    plot(q[:,j], p[:,j], color=cc(j), label="(q$(j_str),p$(j_str))", lw=1)
end
plot!(grid=true, linestyle=:dot)  # Add grid with appropriate linestyle
xlabel!("q")  # Update x-axis label
ylabel!("p")  # Update y-axis label
plot!(legend=:bottomleft)
```

```julia
# Plot the energy of a Hamiltonian problem
t, q, p = sol2tqp(sol)
energy = [H(q[i,:], p[i,:], nothing) for i in 1:size(q)[1]]
plot(t, energy, label="energy", color="red", lw=1)
plot!(grid=true, linestyle=:dot)  # Add grid with appropriate linestyle
xlabel!("t")  # Update x-axis label
ylabel!("Energy")  # Update y-axis label
plot!(legend=:bottomleft)
stdenergy_str = @sprintf("%.3e", std(energy))
title!("std(energy) = $stdenergy_str", fontsize=10)  # Update title
```

```julia
# Plot the numerical and exact solutions of a single pendulum
t, q, p = sol2tqp(sol)
y = sin.(q/2)
y_exact = k*sn.(t, k) # the exact solution
plot(t, y, label="numerical", lw=1)
plot!(t, y_exact, label="exact", lw=1, ls=:dash, alpha=0.8, color="red")
plot!(grid=true)  # Add grid with appropriate linestyle
xlabel!("t")  # Update x-axis label
ylabel!("y = sin(q(t)/2)")  # Update y-axis label
plot!(legend=:bottomleft)
error_str = @sprintf("%.3e", maximum(abs.(y - y_exact)))
title!("maximum(abs(numerical - exact)) = $error_str", fontsize=10)
```

```julia, echo = false
using SciMLBenchmarks
SciMLBenchmarks.bench_footer(WEAVE_ARGS[:folder],WEAVE_ARGS[:file])
```
